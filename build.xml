<?xml version="1.0"?>
<!--
  ~ The MIT License
  ~
  ~ Copyright (c) 2009 The Broad Institute
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy
  ~ of this software and associated documentation files (the "Software"), to deal
  ~ in the Software without restriction, including without limitation the rights
  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  ~ copies of the Software, and to permit persons to whom the Software is
  ~ furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in
  ~ all copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  ~ THE SOFTWARE.
  -->

<project name="picard-public" basedir="." default="all">

    <property name="src" value="src/java"/>
    <property name="src.scripts" value="src/scripts"/>
    <property name="src.test" value="src/tests"/>
    <property name="src.test.java" value="${src.test}/java"/>
    <property name="src.www" value="src/www"/>
    <property name="lib" value="lib"/>
    <property name="dist" value="dist"/>
    <property name="classes" value="classes"/>
    <property name="classes.test" value="testclasses"/>
    <property name="scripts" value="src/scripts"/>
    <property name="reports" value="dist/test"/>
    <property name="test.output" value="dist/test"/>
    <property name="htsjdk_lib_dir" value="${dist}/htsjdk_lib_dir"/>
    <property name="htsjdk_git_url" value="git@github.com:samtools/htsjdk.git"/>
    <!-- TODO: get this from the build.xml in htsjdk -->
    <property name="htsjdk-classes" value="htsjdk/classes"/>

    <property name="javac.target" value="1.6"/>
    <property name="javac.debug" value="true"/>

    <!-- Get GIT hash, if available, otherwise leave it blank.  -->
    <exec executable="git" outputproperty="repository.revision" failifexecutionfails="true" errorproperty="">
        <arg value="log"/>
        <arg value="-1"/>
        <arg value="--pretty=format:%H_%at"/>
    </exec>
    <property name="repository.revision" value=""/>
    <property name="picard-version" value="1.114"/>
    <property name="command-line-html-dir" value="${dist}/html"/>
    <property name="testng.verbosity" value="2"/>
    <property name="test.debug.port" value="5005"/>
    <!-- override on the command line if desired -->

    <property environment="env"/>
    <property name="htsjdk" value="htsjdk"/>
    <property name="htsjdk_src" value="${htsjdk}/src/java"/>
    <condition property="isUnix">
        <os family="unix"/>
    </condition>
    <target name="set_excluded_test_groups_unix" if="isUnix">
        <property name="excludedTestGroups" value="slow, broken"/>
    </target>
    <target name="set_excluded_test_groups_non_unix" unless="isUnix">
        <property name="excludedTestGroups" value="slow, broken, unix"/>
    </target>
    <target name="set_excluded_test_groups" depends="set_excluded_test_groups_unix,set_excluded_test_groups_non_unix"/>


    <!-- INIT -->
    <target name="init">
        <path id="classpath">
            <fileset dir="${lib}">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${htsjdk_lib_dir}">
                <include name="*.jar"/>
            </fileset>
        </path>
        <path id="metrics.classpath">
            <pathelement path="${classpath}"/>
            <pathelement location="${classes}"/>
            <pathelement location="${htsjdk}/classes"/>
        </path>

    </target>

    <!-- CLEAN -->
    <target name="clean-local" description="Delete local build products but not nested project">
        <delete dir="${classes}"/>
        <delete dir="${classes.test}"/>
        <delete dir="${test.output}"/>
        <delete dir="${dist}"/>
        <delete dir="javadoc"/>
    </target>

    <target name="clean" description="Clean local build products and also nested project" depends="clean-local, clean-htsjdk"/>

    <!-- HTS-JDK -->
    <target name="set-htsjdk-version">
        <!-- set the htsjdk version -->
        <ant antfile="build.xml" dir="${htsjdk}" target="write-version-property" inheritall="false"/>
        <loadfile property="htsjdk-version" srcFile="${htsjdk}/htsjdk.version.property.xml">
            <filterchain>
                <linecontains>
                    <contains value="htsjdk-version="/>
                </linecontains>
                <tokenfilter>
                    <replacestring from="htsjdk-version=" to=""/>
                </tokenfilter>
                <striplinebreaks/>
            </filterchain>
        </loadfile>
    </target>

    <target name="clone-htsjdk" description="Clone HTS-JDK sources from Sourceforge">
        <exec executable="git" failonerror="true">
            <arg value="clone"/>
            <arg value="${htsjdk_git_url}"/>
            <arg value="${htsjdk}"/>
        </exec>
    </target>

    <target name="compile-htsjdk" depends="set-htsjdk-version" description="Build HTS-JDK, and grab build jars">
        <ant antfile="build.xml" dir="${htsjdk}" target="clean" inheritall="false"/>
        <ant antfile="build.xml" dir="${htsjdk}" target="all" inheritall="false"/>
        <copy todir="${htsjdk_lib_dir}">
            <fileset dir="${htsjdk}/dist" includes="**/*-*.jar"/>
            <fileset dir="${htsjdk}/lib" includes="*.jar"/>
        </copy>
        <copy todir="${dist}">
            <fileset dir="${htsjdk}/dist" includes="**/*.jar" excludes="**/*-*.jar"/>
        </copy>
        <!-- set the htsjdk version -->
        <ant antfile="build.xml" dir="${htsjdk}" target="write-version-property" inheritall="false"/>
    </target>

    <target name="clean-htsjdk" description="Clean HTS-JDK">
        <ant antfile="build.xml" dir="${htsjdk}" target="clean" inheritall="false"/>
    </target>

    <target name="test-htsjdk" description="Test HTS-JDK">
        <ant antfile="build.xml" dir="${htsjdk}" target="test" inheritall="false"/>
    </target>

    <target name="compile-htsjdk-tests" description="Compile HTS-JDK Tests">
        <ant antfile="build.xml" dir="${htsjdk}" target="compile-tests" inheritall="false"/>
    </target>

    <!-- COMPILE -->
    <target name="compile" depends="compile-src, compile-tests"
            description="Compile files without cleaning">
    </target>

    <target name="compile-src" depends="compile-htsjdk, compile-picard" description="Compile files without cleaning"/>

    <target name="compile-picard" depends="init" description="Compile picard files without cleaning">
        <compile-src includes="picard/**/*.*" />
    </target>

    <target name="compile-tests" depends="compile-htsjdk-tests, compile-picard-tests" description="Compile test files without cleaning"/>

    <target name="compile-picard-tests" depends="init" description="Compile picard test files without cleaning">
        <compile-tests includes="picard/**/*.*"/>
        <copy todir="${classes.test}/">
            <fileset dir="${src.test}/scripts" includes="**/*"/>
        </copy>
    </target>

    <target name="build-timestamp">
        <tstamp>
            <format property="build.timestamp" pattern="yyyy.MM.dd hh.mm.ss" locale="en,US"/>
        </tstamp>
        <replace dir="${command-line-html-dir}" token="@builddate@" value="${build.timestamp}">
            <include name="**/*.shtml"/>
        </replace>
    </target>

    <!-- TEST -->
    <target name="test" depends="compile, set_excluded_test_groups" description="Run unit tests">
        <taskdef resource="testngtasks" classpathref="classpath"/>
        <testng suitename="picard-tests" classpathref="classpath" outputdir="${test.output}"
                failureproperty="tests.failed" excludedgroups="${excludedTestGroups}" workingDir="${basedir}"
                verbose="${testng.verbosity}">
            <classpath>
                <pathelement path="${classes}"/>
                <pathelement path="${classes.test}"/>
                <pathelement path="${scripts}"/>
            </classpath>
            <classfileset dir="${classes.test}">
                <include name="**/Test*.class"/>
                <include name="**/*Test.class"/>
            </classfileset>
            <jvmarg value="-Xmx2G"/>
        </testng>
        <junitreport todir="${dist}/test">
            <fileset dir="${test.output}">
                <include name="*.xml"/>
            </fileset>
            <report format="noframes" todir="${dist}/test" styledir="etc/test"/>
        </junitreport>
        <copy file="etc/test/testng.css" todir="${dist}/test" overwrite="true"/>
        <fail if="tests.failed" message="There were failed unit tests"/>
    </target>

    <target name="single-test"
            depends="compile, compile-tests"
            description="Compile and run a single test.">
        <taskdef resource="testngtasks" classpathref="classpath"/>
        <fail unless="name" message="Please provide input test: -Dname=..."/>

        <condition property="debug.jvm.args" value="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=${test.debug.port}"
                   else="">
            <isset property="test.debug"/>
        </condition>

        <testng suitename="picard-single-test" classpathref="classpath" outputdir="${test.output}"
                verbose="${testng.verbosity}">
            <jvmarg line="-Xmx512M ${debug.jvm.args}"/>
            <classpath>
                <pathelement path="${classes}"/>
                <pathelement path="${classes.test}"/>
                <pathelement path="${scripts}"/>
            </classpath>
            <classfileset dir="${classes.test}">
                <include name="**/${name}.class"/>
            </classfileset>
        </testng>
    </target>

    <target name="picard-annotations-jar" depends="compile">
        <mkdir dir="${classes}"/>
        <jar destfile="${lib}/picard-annotations.jar" compress="no">
            <service type="javax.annotation.processing.Processor" provider="picard.cmdline.CommandLineAnnotationProcessor"/>
            <fileset dir="${classes}" includes="picard/cmdline/**/*.*"/>
            <manifest>
                <attribute name="Class-Path" value="$picard-${picard-version}.jar ${htsjdk}-${htsjdk-version}.jar"/>
            </manifest>
        </jar>
    </target>

    <target name="picard-jar" depends="compile"
            description="Builds picard-${picard-version}.jar for inclusion in other projects">
        <mkdir dir="${dist}"/>
        <jar destfile="${dist}/picard-${picard-version}.jar" compress="no">
            <fileset dir="${classes}" includes="picard/**/*.*, META-INF/**/*"/>
            <fileset dir="${src.scripts}" includes="**/*.R"/>
            <fileset dir="${htsjdk-classes}" includes ="htsjdk/samtools/**/*.*"/>
            <fileset dir="${htsjdk-classes}" includes="htsjdk/tribble/**/*.*"/>
            <fileset dir="${htsjdk-classes}" includes="htsjdk/variant/**/*.*"/>            <manifest>
                <attribute name="Implementation-Version" value="${picard-version}(${repository.revision})"/>
                <attribute name="Implementation-Vendor" value="Broad Institute"/>
                <attribute name="Main-Class" value="picard.cmdline.PicardCommandLine"/>
            </manifest>
        </jar>
    </target>

    <target name="javadoc" depends="init" description="Generates the project javadoc.">
        <javadoc
                destdir="javadoc/picard"
                packagenames="picard*"
                windowtitle="PICARD JDK API Documentation"
                doctitle="&lt;h1&gt;PICARD JDK API Documentation&lt;/h1&gt;"
                author="true"
                protected="true"
                use="true"
                version="true"
                failonerror="true"
                excludepackagenames="htsjdk*">
            <classpath>
                <pathelement location="${java.home}/../lib/tools.jar"/>
                <fileset dir="${lib}">
                    <include name="**/*.jar"/>
                </fileset>
                <fileset dir="${htsjdk}/dist">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <link href="http://java.sun.com/j2se/1.6.0/docs/api/"/>
            <fileset dir="${src}" defaultexcludes="yes">
                <include name="**/*.java"/>
            </fileset>
        </javadoc>
        <javadoc
                destdir="javadoc/htsjdk"
                packagenames="htsjdk*"
                windowtitle="HTSJDK API Documentation"
                doctitle="&lt;h1&gt;HTSJDK API Documentation&lt;/h1&gt;"
                author="true"
                protected="true"
                use="true"
                version="true"
                failonerror="true"
                excludepackagenames="picard*">
            <classpath>
                <pathelement location="${java.home}/../lib/tools.jar"/>
                <fileset dir="${lib}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <link href="http://java.sun.com/j2se/1.6.0/docs/api/"/>
            <fileset dir="${htsjdk_src}" defaultexcludes="yes">
                <include name="**/*.java"/>
            </fileset>
        </javadoc>
        <mkdir dir="${command-line-html-dir}"/>
        <javadoc doclet="picard.util.MetricsDoclet"
                 docletpathref="metrics.classpath"
                 classpathref="metrics.classpath"
                 failonerror="true" verbose="true">
            <classpath>
                <pathelement location="${java.home}/../lib/tools.jar"/>
                <fileset dir="${lib}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <fileset dir=".">
                <include name="${src}/**/*.java"/>
                <include name="${htsjdk_src}/**/*.java"/>
            </fileset>
            <arg line="-f ${command-line-html-dir}/picard-metric-definitions.shtml"/>
        </javadoc>
    </target>

    <target name="package-commands" depends="compile, picard-jar">
        <delete dir="${command-line-html-dir}"/>

        <!-- The order of these elements determines the order they appear in the on-line help -->
        <!-- If you don't want to generate on-line doc for a command, use package-command instead of document-command -->
        <document-command title="AddCommentsToBam" main-class="picard.sam.AddCommentsToBam"/>
        <document-command title="AddOrReplaceReadGroups" main-class="picard.sam.AddOrReplaceReadGroups"/>
        <document-command title="BamIndexStats" main-class="picard.sam.BamIndexStats"/>
        <document-command title="BamToBfq" main-class="picard.fastq.BamToBfq"/>
        <document-command title="BuildBamIndex" main-class="picard.sam.BuildBamIndex"/>
        <document-command title="CalculateHsMetrics" main-class="picard.analysis.directed.CalculateHsMetrics"/>
        <document-command title="CheckIlluminaDirectory" main-class="picard.illumina.CheckIlluminaDirectory"/>
        <document-command title="CleanSam" main-class="picard.sam.CleanSam"/>
        <document-command title="CollectAlignmentSummaryMetrics" main-class="picard.analysis.CollectAlignmentSummaryMetrics"/>
        <document-command title="CollectGcBiasMetrics" main-class="picard.analysis.CollectGcBiasMetrics"/>
        <document-command title="CollectInsertSizeMetrics" main-class="picard.analysis.CollectInsertSizeMetrics"/>
        <document-command title="CollectMultipleMetrics" main-class="picard.analysis.CollectMultipleMetrics"/>
        <document-command title="CollectRnaSeqMetrics" main-class="picard.analysis.CollectRnaSeqMetrics"/>
        <document-command title="CollectTargetedPcrMetrics" main-class="picard.analysis.directed.CollectTargetedPcrMetrics"/>
        <document-command title="CollectWgsMetrics" main-class="picard.analysis.CollectWgsMetrics"/>
        <document-command title="CompareSAMs" main-class="picard.sam.CompareSAMs"/>
        <document-command title="CreateSequenceDictionary" main-class="picard.sam.CreateSequenceDictionary"/>
        <document-command title="DownsampleSam" main-class="picard.sam.DownsampleSam"/>
        <document-command title="EstimateLibraryComplexity" main-class="picard.sam.EstimateLibraryComplexity"/>
        <document-command title="ExtractIlluminaBarcodes" main-class="picard.illumina.ExtractIlluminaBarcodes"/>
        <document-command title="ExtractSequences" main-class="picard.reference.ExtractSequences"/>
        <document-command title="FastqToSam" main-class="picard.sam.FastqToSam"/>
        <document-command title="FilterSamReads" main-class="picard.sam.FilterSamReads"/>
        <document-command title="FixMateInformation" main-class="picard.sam.FixMateInformation"/>
        <document-command title="GatherBamFiles" main-class="picard.sam.GatherBamFiles"/>
        <document-command title="IlluminaBasecallsToFastq" main-class="picard.illumina.IlluminaBasecallsToFastq"/>
        <document-command title="IlluminaBasecallsToSam" main-class="picard.illumina.IlluminaBasecallsToSam"/>
        <document-command title="IntervalListTools" main-class="picard.util.IntervalListTools"/>
        <document-command title="MakeSitesOnlyVcf" main-class="picard.vcf.MakeSitesOnlyVcf"/>
        <document-command title="MarkDuplicates" main-class="picard.sam.MarkDuplicates"/>
        <document-command title="MarkIlluminaAdapters" main-class="picard.illumina.MarkIlluminaAdapters"/>
        <document-command title="MeanQualityByCycle" main-class="picard.analysis.MeanQualityByCycle"/>
        <document-command title="MergeBamAlignment" main-class="picard.sam.MergeBamAlignment"/>
        <document-command title="MergeSamFiles" main-class="picard.sam.MergeSamFiles"/>
        <document-command title="MergeVcfs" main-class="picard.vcf.MergeVcfs"/>
        <document-command title="NormalizeFasta" main-class="picard.reference.NormalizeFasta"/>
        <document-command title="QualityScoreDistribution" main-class="picard.analysis.QualityScoreDistribution"/>
        <document-command title="ReorderSam" id="" main-class="picard.sam.ReorderSam"/>
        <document-command title="ReplaceSamHeader" main-class="picard.sam.ReplaceSamHeader"/>
        <document-command title="RevertSam" main-class="picard.sam.RevertSam"/>
        <document-command title="RevertOriginalBaseQualitiesAndAddMateCigar" main-class="picard.sam.RevertOriginalBaseQualitiesAndAddMateCigar"/>
        <document-command title="SamFormatConverter" main-class="picard.sam.SamFormatConverter"/>
        <document-command title="SamToFastq" main-class="picard.sam.SamToFastq"/>
        <document-command title="SortSam" main-class="picard.sam.SortSam"/>
        <document-command title="SplitVcfs" main-class="picard.vcf.SplitVcfs"/>
        <document-command title="ValidateSamFile" main-class="picard.sam.ValidateSamFile"/>
        <document-command title="VcfFormatConverter" main-class="picard.vcf.VcfFormatConverter"/>
        <document-command title="ViewSam" main-class="picard.sam.ViewSam"/>
    </target>

    <!-- ALL -->
    <target name="all" depends="compile, package-commands, document-standard-options, copy-html, build-timestamp"
            description="Default build target">
        <zip zipfile="${dist}/picard-tools-${picard-version}.zip">
            <zipfileset dir="${dist}" includes="*.jar" prefix="picard-tools-${picard-version}"/>
            <zipfileset dir="${htsjdk_lib_dir}" includes="htsjdk-*.jar" prefix="picard-tools-${picard-version}"/>
            <zipfileset dir="${lib}" includes="snappy*.jar"/>
            <!-- distribute libJniDeflater.so in same directory as jarfiles-->
            <zipfileset dir="${lib}/jni" includes="*" prefix="picard-tools-${picard-version}"/>
        </zip>
    </target>

    <!-- ************************************************************************************** -->
    <!-- ************************************************************************************** -->
    <!-- Beginning of taskdefs that are used elsewhere in the build file                        -->
    <!-- ************************************************************************************** -->
    <!-- ************************************************************************************** -->

    <target name="document-standard-options" depends="picard-jar">
        <sequential>
            <!-- For Sourceforge project website -->
            <mkdir dir="${command-line-html-dir}/program_usage"/>

            <!-- Generate HTML for each command -->
            <java classname="picard.cmdline.CreateHtmlDocForStandardOptions"
                  output="${command-line-html-dir}/program_usage/standard-options.shtml"
                  failonerror="true">
                <classpath>
                    <pathelement location="${dist}/picard-${picard-version}.jar"/>
                    <pathelement location="${htsjdk_lib_dir}/htsjdk-${htsjdk-version}.jar"/>
                </classpath>
            </java>
        </sequential>
    </target>

    <target name="copy-html">
        <copy todir="${command-line-html-dir}">
            <fileset dir="${src.www}"/>
        </copy>
    </target>

    <!-- generate HTML documentation for command-line program -->
    <macrodef name="document-command">
        <attribute name="main-class"/>
        <attribute name="title"/>
        <element name="filesets" optional="yes"/>
        <sequential>
            <!-- For Sourceforge project website -->
            <mkdir dir="${command-line-html-dir}/program_usage"/>
            <mkdir dir="${command-line-html-dir}/inc"/>

            <!-- Generate HTML for each command -->
            <java classname="picard.cmdline.CreateHtmlDocForProgram"
                  output="${command-line-html-dir}/program_usage/@{title}.shtml"
                  failonerror="true">
                <classpath>
                    <pathelement location="${dist}/picard-${picard-version}.jar"/>
                    <pathelement location="${htsjdk_lib_dir}/htsjdk-${htsjdk-version}.jar"/>
                </classpath>
                <arg value="@{main-class}"/>
            </java>

            <!-- Generate links to each command -->
            <echo file="${command-line-html-dir}/inc/command-line-sidebar.shtml" append="true"
                  message="&lt;li>&lt;a href=&quot;command-line-overview.shtml#@{title}&quot;>@{title}&lt;/a>${line.separator}"/>

            <!-- include usage for each command -->
            <echo file="${command-line-html-dir}/inc/command-line-usage.shtml" append="true"
                  message="&lt;!--#include virtual=&quot;@{title}.shtml&quot; -->${line.separator}"/>
        </sequential>
    </macrodef>

    <!-- Compile source files specified by includes, from source root. Can specifically
    include or exclude-->
    <macrodef name="compile-src">
        <attribute name="includes" default=""/>
        <attribute name="excludes" default=""/>
        <attribute name="destdir" default="${classes}"/>
        <attribute name="compile.classpath" default="classpath"/>
        <attribute name="compiler.args" default=""/>
        <sequential>
            <mkdir dir="${classes}"/>
            <!-- unset the sourcepath attribute in order to compile only files explicitly specified and disable javac's default searching mechanism -->
            <javac destdir="@{destdir}"
                   optimize="${javac.opt}"
                   debug="${javac.debug}"
                   sourcepath=""
                   srcdir="${src}"
                   includes="@{includes}"
                   excludes="@{excludes}"
                   source="${javac.target}"
                   target="${javac.target}">
                <classpath refid="@{compile.classpath}"/>
                <compilerarg line="@{compiler.args}"/>
            </javac>
        </sequential>
    </macrodef>

    <macrodef name="compile-tests">
        <attribute name="includes" default=""/>
        <attribute name="excludes" default=""/>
        <attribute name="compiler.args" default=""/>

        <sequential>
            <mkdir dir="${classes.test}"/>
            <javac destdir="${classes.test}"
                   optimize="${javac.opt}"
                   debug="${javac.debug}"
                   srcdir="${src.test.java}"
                   includes="@{includes}"
                   excludes="@{excludes}"
                   source="${javac.target}"
                   target="${javac.target}">
                <classpath>
                    <path refid="classpath"/>
                    <pathelement location="${classes}"/>
                </classpath>
                <compilerarg line="@{compiler.args}"/>
            </javac>
        </sequential>
    </macrodef>
</project>
